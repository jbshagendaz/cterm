(require '[clj-commons-exec :as exec]))
(require '[clj-commons-exec :as exec])
(exec/sh ["ls" "~/Documents"] {dir: "/"})
(exec/sh ["ls" "~/Documents"] {:dir "/"})
(println (:out @(exec/sh ["ls" "~/Documents"] {:dir "/"})))
(println (:out @(exec/sh ["ls" "~/Documents"] {:dir "~/Documents/workspace"})))
(println (:out @(exec/sh ["ls" "/Users/jb/Documents"] {:dir "/Users/jb/Documents/workspace"})))
(println (:out @(exec/sh ["ls" "/Users/jb/Documents"] {:dir "/Users/jb/Documents/workspace/clojure"})))
(println (:out @(exec/sh ["ls" "/Users/jb/Documents"] {:dir ""})))
(println (:out @(exec/sh ["ls" "/Users/jb/Documents"] {:dir "/"})))
(println (:out @(exec/sh ["ls"] {:dir "/"})))
(println (:out @(exec/sh ["cd" "~/"])))
(println (:out @(exec/sh ["cd" "//"])))
(println @(exec/sh ["cd" "/"]))
(println @(exec/sh ["cd" "//"]))
(println @(exec/sh ["cd" "//adsfasd"]))
(let [x 1] x)
(let [x 1] (+ x 3))
(let [x 1] (+ 3 3) (x))
(let [x 1] (+ 3 3) x)
(def x 1)
(def y x)
y
(def x 2)
y
(println @(exec/sh ["ls"] {:dir /Users/jb/Documents/workspace/))
(println @(exec/sh ["ls"] {:dir /Users/jb/Documents/workspace/}))
(println @(exec/sh ["ls"] {:dir "/Users/jb/Documents/workspace/"))
(println @(exec/sh ["ls"] {:dir /Users/jb/Documents/workspace/})))
(println @(exec/sh ["ls"] {:dir "/Users/jb/Documents/workspace/"}))
(def x this)
(def x "this")
x
(def x "/Users")
(println @(exec/sh ["ls"] {:dir x}))
(println @(exec/sh ["pwd"] {:dir x}))
(def x "/Users/jb")
(println @(exec/sh ["pwd"] {:dir x}))
(println @(exec/sh ["cd"] ["pwd"] {:dir x}))
(println @(exec/sh ["cd"] ["pwd"]))
(println @(exec/sh ["cd" "/"] ["pwd"]))
(println @(exec/sh ["cd" "/"]))
(println @(exec/sh ["cd" "/"] ["pwd"]))
(println @(exec/sh ["cd" "/Users"] ["pwd"]))
(println @(exec/sh-pipe ["cd" "/Users"] ["pwd"]))
(println (last @(exec/sh-pipe ["cd" "/Users"] ["pwd"])))
(println @(last (exec/sh-pipe ["cd" "/Users"] ["pwd"])))
(str "this" " is " "a " "test")
(str "this" " is " "a " "test"
)
(get "/Users" 0)
(= "/" (get "/Users" 0))
(= "\/" (get "/Users" 0))
(= '/' (get "/Users" 0))
(= \'/' (get "/Users" 0))
(= \/ (get "/Users" 0))
(def curr "/Users")
(def curr (str curr "/" "jb"))
curr
(not= \/ (get "/Users" 0))
(not= \/ (get "Users" 0))
